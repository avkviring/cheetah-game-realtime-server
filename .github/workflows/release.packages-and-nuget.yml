name: release.packages-and-nuget.packages
on:
  release:
    types: [ published ]
env:
  REALTIME_CLIENT_MANIFEST_PATH: rust/Client/Cargo.toml
  REALTIME_EMBEDDED_MANIFEST_PATH: rust/Embedded/Cargo.toml
jobs:
  build-macos:
    uses: ./.github/workflows/templates.build-on-macos.yml
  build-on-linux:
    uses: ./.github/workflows/templates.build-on-linux.yml
  build-on-windows:
    uses: ./.github/workflows/templates.build-on-windows.yml
  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - run: rustup target add aarch64-apple-ios
      - name: Build Client
        run: cargo build --manifest-path $REALTIME_CLIENT_MANIFEST_PATH --target aarch64-apple-ios --release
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-ios
          path: |
            rust/target/aarch64-apple-ios/release/libcheetah_client.a
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: cargo version
        run: cargo version
      - name: Install Cross
        run: cargo install --version 0.2.5 cross
      - name: Build Android armv7-linux-androideabi
        run: cross build --manifest-path $REALTIME_CLIENT_MANIFEST_PATH --target armv7-linux-androideabi --release
      - name: Build Android aarch64-linux-android
        run: cross build --manifest-path $REALTIME_CLIENT_MANIFEST_PATH --target aarch64-linux-android --release
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-android
          path: |
            rust/target/armv7-linux-androideabi/release/libcheetah_client.so
            rust/target/aarch64-linux-android/release/libcheetah_client.so
  publish-unity-packages:
    needs:
      - build-macos
      - build-ios
      - build-on-linux
      - build-android
      - build-on-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate GRPC Implementations
        run: cd scripts && ./generate-all.sh
      - uses: actions/download-artifact@v3
        with:
          name: build-ios
          path: build-ios
      - uses: actions/download-artifact@v3
        with:
          name: build-macos
          path: build-macos
      - uses: actions/download-artifact@v3
        with:
          name: build-on-linux-result
          path: build-on-linux-result
      - uses: actions/download-artifact@v3
        with:
          name: build-android
          path: build-android
      - uses: actions/download-artifact@v3
        with:
          name: build-on-windows-result
          path: build-on-windows-result
      - name: Copy Libraries into Realtime Matches Package
        run: |
          lib_path=client/Unity/Packages/games.cheetah.client/Runtime/Library
          mkdir -p $lib_path
          cp build-macos/libcheetah_client.dylib $lib_path/libcheetah_client.bundle
          cp build-on-linux-result/libcheetah_client.so $lib_path/
          cp build-on-windows-result/cheetah_client.dll $lib_path/
          cp build-on-windows-result/cheetah_client.pdb $lib_path/
          cp build-ios/libcheetah_client.a $lib_path/
          mkdir -p $lib_path/android-armv7
          cp build-android/armv7-linux-androideabi/release/libcheetah_client.so $lib_path/android-armv7/
          mkdir -p $lib_path/android-aarch64
          cp build-android/aarch64-linux-android/release/libcheetah_client.so $lib_path/android-aarch64/
      - name: Copy Libraries into Realtime Matches Embedded Package
        run: |
          lib_path=client/Unity/Packages/games.cheetah.embedded-server/Runtime/FFI/Library/
          mkdir -p $lib_path
          cp build-on-linux-result/libcheetah_embedded.so $lib_path/          
          cp build-macos/libcheetah_embedded.dylib $lib_path/libcheetah_embedded.bundle            
          cp build-on-windows-result/cheetah_embedded.dll $lib_path/
          cp build-on-windows-result/cheetah_embedded.pdb $lib_path/
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://npm.cheetah.games'
          scope: ''
      - name: Publish Packages
        run: |
          package_files=$(find client/Unity/Packages/ -name 'package.json')
          for f in $package_files; do
            sed -i 's/999.999.999/${{ github.event.release.tag_name }}/' $f
            npm publish $(dirname $f)
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
  publish-nuget-packages:
    needs:
      - build-macos
      - build-on-linux
      - build-on-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-macos
          path: build-macos
      - uses: actions/download-artifact@v3
        with:
          name: build-on-linux-result
          path: build-on-linux-result
      - uses: actions/download-artifact@v3
        with:
          name: build-android
          path: build-android
      - uses: actions/download-artifact@v3
        with:
          name: build-on-windows-result
          path: build-on-windows-result
      - name: Copy Libraries into
        run: |
         lib_path=client/Net/Embedded/Src/
         mkdir native
         mkdir -p $lib_path
         cp build-on-linux-result/libcheetah_embedded.so $lib_path/          
         cp build-macos/libcheetah_embedded.dylib $lib_path/            
         cp build-on-windows-result/cheetah_embedded.dll $lib_path/
         cp build-on-windows-result/cheetah_embedded.pdb $lib_path/
      - name: Publish Packages
        run: VERSION=${{ github.event.release.tag_name }} NUGET_PUSH_KEY=${{ secrets.NUGET_PUSH_KEY }} scripts/release/nuget-packages.sh