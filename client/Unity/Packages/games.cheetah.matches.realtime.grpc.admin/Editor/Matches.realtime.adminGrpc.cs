// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matches.realtime.admin.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cheetah.Matches.Realtime.GRPC.Admin {
  /// <summary>
  ///*
  ///Общие команды для получения информации и управления сервером
  /// </summary>
  public static partial class Realtime
  {
    static readonly string __ServiceName = "cheetah.matches.realtime.admin.Realtime";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest> __Marshaller_cheetah_matches_realtime_admin_GetRoomsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse> __Marshaller_cheetah_matches_realtime_admin_GetRoomsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse> __Method_GetRooms = new grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRooms",
        __Marshaller_cheetah_matches_realtime_admin_GetRoomsRequest,
        __Marshaller_cheetah_matches_realtime_admin_GetRoomsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cheetah.Matches.Realtime.GRPC.Admin.MatchesRealtimeAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Realtime</summary>
    [grpc::BindServiceMethod(typeof(Realtime), "BindService")]
    public abstract partial class RealtimeBase
    {
      /// <summary>
      ///*
      ///Получить список комнат
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse> GetRooms(global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Realtime</summary>
    public partial class RealtimeClient : grpc::ClientBase<RealtimeClient>
    {
      /// <summary>Creates a new client for Realtime</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RealtimeClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Realtime that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RealtimeClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RealtimeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RealtimeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      ///Получить список комнат
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse GetRooms(global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRooms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Получить список комнат
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse GetRooms(global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRooms, null, options, request);
      }
      /// <summary>
      ///*
      ///Получить список комнат
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse> GetRoomsAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoomsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Получить список комнат
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse> GetRoomsAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRooms, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override RealtimeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RealtimeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(RealtimeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetRooms, serviceImpl.GetRooms).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RealtimeBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetRooms, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.GetRoomsResponse>(serviceImpl.GetRooms));
    }

  }
  /// <summary>
  ///*
  ///Получения состояния комнаты для отладки
  /// </summary>
  public static partial class Dump
  {
    static readonly string __ServiceName = "cheetah.matches.realtime.admin.Dump";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest> __Marshaller_cheetah_matches_realtime_admin_DumpRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse> __Marshaller_cheetah_matches_realtime_admin_DumpResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse> __Method_Dump = new grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Dump",
        __Marshaller_cheetah_matches_realtime_admin_DumpRequest,
        __Marshaller_cheetah_matches_realtime_admin_DumpResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cheetah.Matches.Realtime.GRPC.Admin.MatchesRealtimeAdminReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Dump</summary>
    [grpc::BindServiceMethod(typeof(Dump), "BindService")]
    public abstract partial class DumpBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse> Dump(global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Dump</summary>
    public partial class DumpClient : grpc::ClientBase<DumpClient>
    {
      /// <summary>Creates a new client for Dump</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DumpClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Dump that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DumpClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DumpClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DumpClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse Dump(global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Dump(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse Dump(global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Dump, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse> DumpAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DumpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse> DumpAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Dump, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DumpClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DumpClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DumpBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Dump, serviceImpl.Dump).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DumpBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Dump, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Matches.Realtime.GRPC.Admin.DumpRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.DumpResponse>(serviceImpl.Dump));
    }

  }
  /// <summary>
  ///*
  ///Сервис получения сетевых команд для отладки
  /// </summary>
  public static partial class CommandTracer
  {
    static readonly string __ServiceName = "cheetah.matches.realtime.admin.CommandTracer";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest> __Marshaller_cheetah_matches_realtime_admin_CreateSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse> __Marshaller_cheetah_matches_realtime_admin_CreateSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest> __Marshaller_cheetah_matches_realtime_admin_SetFilterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse> __Marshaller_cheetah_matches_realtime_admin_SetFilterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest> __Marshaller_cheetah_matches_realtime_admin_GetCommandsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse> __Marshaller_cheetah_matches_realtime_admin_GetCommandsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest> __Marshaller_cheetah_matches_realtime_admin_CloseSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse> __Marshaller_cheetah_matches_realtime_admin_CloseSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse> __Method_CreateSession = new grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSession",
        __Marshaller_cheetah_matches_realtime_admin_CreateSessionRequest,
        __Marshaller_cheetah_matches_realtime_admin_CreateSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse> __Method_SetFilter = new grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetFilter",
        __Marshaller_cheetah_matches_realtime_admin_SetFilterRequest,
        __Marshaller_cheetah_matches_realtime_admin_SetFilterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse> __Method_GetCommands = new grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCommands",
        __Marshaller_cheetah_matches_realtime_admin_GetCommandsRequest,
        __Marshaller_cheetah_matches_realtime_admin_GetCommandsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse> __Method_CloseSession = new grpc::Method<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CloseSession",
        __Marshaller_cheetah_matches_realtime_admin_CloseSessionRequest,
        __Marshaller_cheetah_matches_realtime_admin_CloseSessionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cheetah.Matches.Realtime.GRPC.Admin.MatchesRealtimeAdminReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of CommandTracer</summary>
    [grpc::BindServiceMethod(typeof(CommandTracer), "BindService")]
    public abstract partial class CommandTracerBase
    {
      /// <summary>
      ///*
      ///Создать сессию
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse> CreateSession(global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///Установить фильтр для фильтрации команд
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse> SetFilter(global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///Получить отфильтрованные команды
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse> GetCommands(global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse> CloseSession(global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CommandTracer</summary>
    public partial class CommandTracerClient : grpc::ClientBase<CommandTracerClient>
    {
      /// <summary>Creates a new client for CommandTracer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CommandTracerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CommandTracer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CommandTracerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CommandTracerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CommandTracerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      ///Создать сессию
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse CreateSession(global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Создать сессию
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse CreateSession(global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      ///*
      ///Создать сессию
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse> CreateSessionAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Создать сессию
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse> CreateSessionAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      ///*
      ///Установить фильтр для фильтрации команд
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse SetFilter(global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetFilter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Установить фильтр для фильтрации команд
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse SetFilter(global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetFilter, null, options, request);
      }
      /// <summary>
      ///*
      ///Установить фильтр для фильтрации команд
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse> SetFilterAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetFilterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Установить фильтр для фильтрации команд
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse> SetFilterAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetFilter, null, options, request);
      }
      /// <summary>
      ///*
      ///Получить отфильтрованные команды
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse GetCommands(global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCommands(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Получить отфильтрованные команды
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse GetCommands(global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCommands, null, options, request);
      }
      /// <summary>
      ///*
      ///Получить отфильтрованные команды
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse> GetCommandsAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCommandsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///Получить отфильтрованные команды
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse> GetCommandsAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCommands, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse CloseSession(global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse CloseSession(global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseSession, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse> CloseSessionAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse> CloseSessionAsync(global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseSession, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CommandTracerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CommandTracerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CommandTracerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSession, serviceImpl.CreateSession)
          .AddMethod(__Method_SetFilter, serviceImpl.SetFilter)
          .AddMethod(__Method_GetCommands, serviceImpl.GetCommands)
          .AddMethod(__Method_CloseSession, serviceImpl.CloseSession).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CommandTracerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.CreateSessionResponse>(serviceImpl.CreateSession));
      serviceBinder.AddMethod(__Method_SetFilter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.SetFilterResponse>(serviceImpl.SetFilter));
      serviceBinder.AddMethod(__Method_GetCommands, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.GetCommandsResponse>(serviceImpl.GetCommands));
      serviceBinder.AddMethod(__Method_CloseSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionRequest, global::Cheetah.Matches.Realtime.GRPC.Admin.CloseSessionResponse>(serviceImpl.CloseSession));
    }

  }
}
#endregion
