syntax = "proto3";
package cheetah.matches.realtime.admin;
option csharp_namespace = "Cheetah.Matches.Realtime.GRPC.Admin";

import public "matches.realtime.shared.proto";
/**
 Общие команды для получения информации и управления сервером
 */
service Realtime {
  /**
  Получить список комнат
 */
  rpc GetRooms(GetRoomsRequest) returns(GetRoomsResponse);
}

message GetRoomsRequest {

}

message GetRoomsResponse {
  repeated uint64 rooms = 1;
}

/**
 Получения состояния комнаты для отладки
 */
service Dump {
  rpc Dump(DumpRequest) returns(DumpResponse);
}

message DumpRequest {
  uint64 room = 1;
}

message DumpResponse {
  repeated DumpUser users = 1;
  repeated DumpObject objects = 2;
}

message  DumpUser {
  uint32 id = 1;
  uint64 groups = 2;
  bool attached = 3;
  repeated CompareAndSetCleaner compare_and_set_cleaners = 4;
}

message CompareAndSetCleaner {
  uint32 game_object_id = 1;
  uint32 game_object_owner_user = 2;
  uint32 field_id = 3;
  cheetah.matches.realtime.shared.FieldValue value = 4;
}

message DumpObject {
  uint32 id = 1;
  uint64 groups = 2;
  uint32 template = 3;
  bool created = 4;
  optional uint32 owner_user_id = 5;
  repeated cheetah.matches.realtime.shared.GameObjectField fields = 6;
  map<uint32, int64> compare_and_set_owners = 9;
}

/**
  Сервис получения сетевых команд для отладки
 */
service CommandTracer {

  /**
    Создать сессию
   */
  rpc CreateSession(CreateSessionRequest) returns(CreateSessionResponse);

  /**
    Установить фильтр для фильтрации команд
   */
  rpc SetFilter(SetFilterRequest) returns(SetFilterResponse);

  /**
    Получить отфильтрованные команды
   */
  rpc GetCommands(GetCommandsRequest) returns(GetCommandsResponse);

  rpc CloseSession(CloseSessionRequest) returns(CloseSessionResponse);

}


message CreateSessionRequest {
  uint64 room = 1;
}
message CreateSessionResponse {
  uint32 id = 1;
}

message SetFilterRequest {
  uint64 room = 1;
  uint32 session = 2;
  string filter = 3;
}

message SetFilterResponse {

}

message GetCommandsRequest {
  uint64 room = 1;
  uint32 session = 2;
}

message GetCommandsResponse {
  repeated Command commands = 1;
}


message Command {
  double time = 1;
  string direction = 2;
  string command = 3;
  string object_id = 4;
  uint32 user_id = 5;
  optional uint32 template = 6;
  optional uint32 field_id = 7;
  optional cheetah.matches.realtime.shared.FieldType field_type = 8;
  string value = 9;
}

message CloseSessionRequest {
  uint64 room = 1;
  uint32 session = 2;
}

message CloseSessionResponse {

}
