syntax = "proto3";
package cheetah.matches.realtime.internal;
option csharp_namespace = "Games.Cheetah.GRPC.Internal";

import public "shared.proto";

service Internal {
  /**
    Создать комнату
   */
  rpc CreateRoom(RoomTemplate) returns(RoomIdResponse);

  /**
    Присоединить пользователя к комнате, после этого комната будет ожидать udp соединения
   */
  rpc CreateMember(CreateMemberRequest) returns(CreateMemberResponse);

  /**
    Удалить пользователя из комнаты и закрыть соединение
   */
  rpc DeleteMember(DeleteMemberRequest) returns(DeleteMemberResponse);

  /**
    Создать супер пользователя, для него отключены проверки всех прав
   */
  rpc CreateSuperMember(CreateSuperMemberRequest) returns(CreateMemberResponse);

  /**
    Проверить живой ли сервер
   */
  rpc Probe(ProbeRequest) returns (ProbeResponse);

  /**
    Отслеживание операций создания комнаты, при первом вызове отсылаются и уже созданные комнаты.
   */
  rpc GetRooms(EmptyRequest) returns (GetRoomsResponse);


  /**
    Отключить всех пользователей от комнаты и удалить её
   */
  rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomResponse);

  rpc GetRoomsMembersCount(EmptyRequest) returns(GetRoomsMembersCountResponse);
}


/**
 * Запрос без параметров
 */
message EmptyRequest {

}


/**
 * Ответ с идентификатором комнаты
 */
message RoomIdResponse {
  uint64 room_id = 1;
}


message CreateMemberRequest {
  uint64 room_id = 1;
  UserTemplate user = 2;
}

message CreateSuperMemberRequest {
  uint64 room_id = 1;
}

message  CreateMemberResponse {
  uint32 user_id = 1;
  bytes private_key = 2;
}


/**
  Шаблон для описания комнаты
 */
message RoomTemplate {
  string template_name = 1;
  /**
    Начальные игровые объекты комнаты
   */
  repeated GameObjectTemplate objects = 2;
}

message UserTemplate {
  uint64 groups = 3;
  repeated GameObjectTemplate objects = 4;
}

message GameObjectTemplate {
  uint32 id = 1;
  uint32 template = 2;
  uint64 groups = 3;
  repeated cheetah.matches.realtime.shared.GameObjectField fields = 4;
}


message ProbeRequest {

}
message ProbeResponse {

}

message DeleteRoomRequest {
  uint64 id = 1;
}

message DeleteRoomResponse {
}

message DeleteMemberRequest {
  uint64 room_id = 1;
  uint32 user_id = 2;
}

message  DeleteMemberResponse {

}

message GetRoomsResponse {
  repeated uint64 rooms = 1;
}

message GetRoomsMembersCountResponse {
  repeated RoomMembersCountResponse rooms = 1;
}

message RoomMembersCountResponse {
  uint64 room = 1;
  uint32 members = 2;
  uint32 connected_members = 3;
}